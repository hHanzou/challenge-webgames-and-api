Angular - Curso Angular 13 - https://www.youtube.com/watch?v=vJt_K1bFUeA&list=PLnDvRpP8Bnex2GQEN0768_AxZg_RaIGmw

2) ng new// ng serve// npm intall -g @angular/cli

3) assets (img e outros)// src (nucleo)//app(programação na parte visual e componentes)

4) ng generate component components/nomedocomponent // para chamar o component: <app-nomedocomponent></app-nomedocomponent>

5) component.ts usado para associar dados na classe para uso na aplicação
é baseado em typescript

6) css global -> src/style.css | css Scoped -> component(generate)

7) compartilhamos dados do componente pai com o componente filho, adicionando na chamada do componente
o [nomeDoDado] e no código ts do componente filho adicionamos um @Input

8)Em Angular temos um recurso chamado diretivas;

Que podem realizar diversas funções no sistema, como aplicar estilos a

um elemento;

Elas começam sempre com ng, o nome fica como: ngAlgumaCoisa;

9) Renderização condicional

É possível exibir determinado conteúdo por meio de uma condicional;

Utilizamos a diretiva ngIf para isso;

Os valores podem ser dinâmicos (propriedades), mas podemos realizar

outros tipos de comparação;

Há a possibilidade também de imprimir um cenário para validação de

falso, com o else;

*ngIf

10) Podemos ativar eventos nos componentes para disparar algum método;

Um evento clássico que utilizamos muito é o click;

A sintaxe é: (click)="algumaFuncao()"

Os métodos ficam na classe;

Futuramente utilizaremos este recurso para acessar uma API;

11)Podemos comunicar eventos de um componente filho para o pai;

Para isso vamos precisar o @Output, que vai fazer a saída do evento do

componente filho;

Na tag de invocação do componente no template, escolhemos um

método para executar quando o evento for emitido;

Exemplo: (emit)="onEmit()"

12)Outro recurso importante é o loop em listas;

Para isso vamos precisar de uma propriedade com os itens da lista;

E no template do componente vamos utilizar o *ngFor;

A sintaxe é: *ngFor="let item of items"

Desta maneira podemos renderizar template baseado em dados;

13) Toda entidade que vamos trabalhar precisa de uma interface;

Isso vai tornar nosso código mais simples ao longo do programa;

Padronizando ele e facilitando a manutenção;

Vamos implementar uma interface a nossa lista de animais;

E fazer um evento que também utilizará este recurso;

14) Os pipe operators são recursos para trabalhar com strings nos templates;

Podemos realizar diversas funções, como deixar o texto em caixa alta;

A sintaxe é: {{ dado | algumPipeOperator }}

Desta maneira nos poupamos de regras de CSS ou manipulação de

strings com JS;

15) O Two way data binding é um recurso muito interessante para trabalho

com formulários;

Basicamente conseguimos alterar props e o template com o

preenchimento de inputs;

É necessário importar o Forms Module no componente principal;

E também declarar o ng Model no input, além de preencher também o

atributo name, todos com o mesmo valor;

[(ngModel)] = "name"

16) O Service é outra parte fundamental da arquitetura do Angular;

Geralmente ficam as requisições para as APIs que utilizamos no projeto;

Precisamos criar o service com: ng generate service <nome>

Importar no componente e iniciar no constructor;

Depois é possível acessar os métodos dele;

17) Nós vamos criar um novo arquivo para declarar nossas rotas;

Nele vamos importar os módulos RouterModule e Routes;

Após a definição estas rotas precisam ser importadas em app.module.ts;

E por fim no template principal criamos as rotas;

E substituímos os componentes por: <router-outlet>

18) Vamos realizar requisições HTTP nos nossos services;

Precisamos importar dois pacotes: HttpClient e HttpHeaders;

Neste exemplo utilizaremos uma API local para simular as request, com o

json-server;

Por último, é necessário inicializar o módulo HttpClientModule em

app.module.ts;

19)Para resgatar um dado do banco vamos precisar criar uma rota dinâmica

no nosso router;

Baseado no id do item teremos a seleção de dado no banco, geralmente

o id vem pela URL;

Para resgatar parâmetros da URL vamos utilizar o Activated Route, um

módulo de Angular;

A lógica para requisição HTTP ficará no service;

20) Agora vamos refatorar nossa ação de remover registro com a execução

HTTP;

Criaremos outro método no service;

E ajustaremos a maneira que o método da classe do componente é

executado;

Com simples mudanças estaremos interagindo com a API!







//////////////

API Rest O que é API? REST e RESTful?: https://www.youtube.com/watch?v=ghTrp1x_1As / O QUE É UMA API? Na prática, não na teoria: https://www.youtube.com/watch?v=3LHSyha0xN0

GET POST

.NET Core .Net Framework VS .Net Core - Qual é a diferença ?: https://www.youtube.com/watch?v=PM1JKY41wnw /  CRUD com Angular e .Net Core Web API - Preparando o ambiente #1: https://www.youtube.com/watch?v=qJTClZKSwQM&list=PLTESsx8-vfPnQ-s4jM-jGrYQMOVg7t1u6

requisição http basica




              "./node_modules/bootstrap/dist/css/bootstrap.min.css",

              "./node_modules/jquery/dist/jquery.min.js",
              "./node_modules/@popperjs/core/dist/umd/popper.min.js",
              "./node_modules/bootstrap/dist/js/bootstrap.min.js"

              <!--<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css">
  <script type="text/javascript" src="	https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script> -->

  <div class="row ">
      <div class="col text-center py-3 bg-secondary">
        <ul style="text-align: center;">
          <li><img src="https://upload.wikimedia.org/wikipedia/pt/2/2d/Mortal_Kombat_Komplete_Edition.jpg" width="163" height="250"></li>
          <li>Mortal Kombat 9 (2011)</li>
          <li>Gênero: Luta</li>
          <li>Detalhes...</li>
        </ul>
      </div>
      <div class="col">JOGO2</div>
      <div class="col bg-secondary">JOGO3</div>

    </div>





    <header>
  <app-header></app-header>
</header>
<main>
  <div class="p-5">
    <h3 class="text-light">Games:</h3>
  </div>
  <section>
    <router-outlet>
      <div class="container text-light text-center mx-auto">
        <app-card></app-card>
      </div>
    </router-outlet>>
  </section>
</main>
<footer>
  <app-footer></app-footer>
</footer>

<!-- 
<section>
  <router-outlet></router-outlet>
</section> -->